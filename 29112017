//Pairs
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
   	Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		int k = in.nextInt();
		Set<Integer> set = new HashSet<Integer>();
		for (int i = 0; i < n; i++) {
			set.add(in.nextInt());
		}
		findPairs(set, k);
	}
 
	private static void findPairs(Set<Integer> set, int k) {
		int pairs = 0;
		for(Integer i: set){
			pairs += set.contains(i+k) ? 1:0;
		}
		
		System.out.println(pairs); 

    }   
}
//Sum VS XOR
package org.capg.hacker.pratice;
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class SumXOR {

    static long solve(long n) {
        // Complete this function
    	 long count = 0; 
    	         for(long i = 0; i<=n;i++){ 
    	        	// System.out.println(n+i);
    	        	// System.out.println(n^i);
    	             if((n+i) == (n^i)){ 
    	                 count ++; 
    	              } 
    	          } 
    	          return count; 

    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        long n = in.nextLong();
        long result = solve(n);
        System.out.println(result);
    }
}
//Missing Numbers
package org.capg.hacker.pratice;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;

public class MissingNumbers2 {

	public static int[] findMissing(int[] a, int n,int[] b, int m){ 
		          
		         int[] missing = new int[m];  
		         int [] result = new int[m-n];  
		         if(n-m!=0 ){         
		         HashMap<Integer, Integer> mapA = new HashMap<Integer, Integer>(); 
		         HashMap<Integer, Integer> mapB = new HashMap<Integer, Integer>(); 
		         for (int i : a) {             
		             if(mapA.containsKey(i)) 
		             {     
		                 mapA.put(i, mapA.get(i)+1); 
		             } 
		             else 
		             {     
		                 mapA.put(i, 1); 
		             } 
		         } 
		             System.out.println(mapA); 
		          
		         for (int i : b) {             
		             if(mapB.containsKey(i)) 
		             {     
		                 mapB.put(i, mapB.get(i)+1); 
		             } 
		             else 
		             {     
		                 mapB.put(i, 1); 
		             } 
		        } 
		            System.out.println(mapB); 
		          
		          
		         int i = 0;          
		          for (Integer key: mapB.keySet()){ 
		                 if (!mapB.get(key).equals(mapA.get(key))){ 
		                     missing[i] = key; 
		                     i++; 
		                 } 
		          }  
		          
		         int s = 0; 
		         for(int k : missing){ 
		             if(k>0){ 
		                 result[s] = k; 
		                 s++; 
		            } 
		             
		         } 
		         Arrays.sort(result); 
		          
		         } 
		          
		          
		         return result; 
		          
		     } 
		          
		 
		     public static void main(String[] args) { 
		           
		          
		         Scanner s = new Scanner(System.in);         
		        int n = s.nextInt(); 
		         int a[] = new int[n];         
		         for(int i = 0; i < n; i++) 
		         { 
		             a[i] = s.nextInt(); 
		         } 
		          
		        int m = s.nextInt(); 
		         int b[] = new int[m];         
		         for(int i = 0; i < m; i++) 
		         { 
		             b[i] = s.nextInt(); 
		         }         
		           
		         int [] result = new int[Math.abs(b.length-a.length)]; 
		          
		         result = findMissing(a,n,b,m); 
		         for(int i: result)    { 
		             System.out.print(i+" "); 
		         } 
		          
		          
		          
		     } 
		  
}

